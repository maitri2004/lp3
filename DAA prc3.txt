Write a program to solve a 0-1 Knapsack problem using dynamic programming or branch and
bound strategy.

def knapsack(weights, values, capacity):
    n = len(values)
    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]
    
    # Build table dp[][] in bottom-up manner
    for i in range(1, n + 1):
        for w in range(1, capacity + 1):
            if weights[i - 1] <= w:
                dp[i][w] = max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]])
            else:
                dp[i][w] = dp[i - 1][w]

    return dp[n][capacity]

# Take user input for weights, values, and capacity
weights = list(map(int, input("Enter weights of items separated by spaces: ").split()))
values = list(map(int, input("Enter values of items separated by spaces: ").split()))
capacity = int(input("Enter the knapsack capacity: "))

# Ensure lengths of weights and values match
if len(weights) != len(values):
    print("Error: The number of weights and values must be the same.")
else:
    print("Maximum value:", knapsack(weights, values, capacity))
