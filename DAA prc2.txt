Write a program to solve a fractional Knapsack problem using a greedy method.

def fractional_knapsack(weights, values, capacity):
    n = len(values)
    # Calculate value-to-weight ratio for each item
    ratio = [(values[i] / weights[i], weights[i], values[i]) for i in range(n)]
    # Sort items by their value-to-weight ratio in decreasing order
    ratio.sort(reverse=True, key=lambda x: x[0])
    
    total_value = 0
    
    for r, w, v in ratio:
        if capacity > 0 and w <= capacity:
            # Take the full item
            capacity = capacity - w
            total_value = total_value + v
        else:
            # Take the fraction of the item that fits
            total_value = total_value + r * capacity
            break
    
    return total_value

# Taking user input for weights, values, and capacity
weights = list(map(int, input("Enter weights of items separated by space: ").split()))
values = list(map(int, input("Enter values of items separated by space: ").split()))
capacity = int(input("Enter the capacity of the knapsack: "))

# Ensure the number of weights and values are the same
if len(weights) != len(values):
    print("The number of weights and values must be the same.")
else:
    print("Maximum value:", fractional_knapsack(weights, values, capacity))
